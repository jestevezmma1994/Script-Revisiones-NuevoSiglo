#!/bin/bash

INPUT=${1}
ROOT_DIR=${2}
OUTPUT=${3}
OUTPUT_STRIP=${4}
ENABLE_CONSOLE=${5}
INIT=${6}

rm -rf initramfs
mkdir -p initramfs

mksquashfs4 ${ROOT_DIR} initramfs/rootfs.img
install -m 755 ${INIT} initramfs/init

cd initramfs

echo ./init >list
echo ./rootfs.img >>list
echo dev >>list
mkdir dev
echo tmp >>list
mkdir tmp
echo tmp/root >>list
mkdir tmp/root
echo tmp/images >>list
mkdir tmp/images
echo dev/loop0 >>list
mknod dev/loop0 b 7 0
echo sys >>list
mkdir sys
echo dev/fp >>list
mknod dev/fp c 127 0

if [ "$ENABLE_CONSOLE" == "yes" ]; then
	cd dev
	mknod console c 5 1
	cd ..
	echo dev/console >>list
fi


cpio -H newc -o > ../initramfs.cpio <list
cd ..
gzip initramfs.cpio

byte_swap()
{
	OUT=""
	CNT=$(echo -n $1 | wc -c); for i in `seq 1 2 $CNT`; do OUT+=`echo -n $1 | cut -c $(( CNT - i ))-$((CNT - i + 1))`; done
}

KER_SIZE=`stat -c "%s" ${INPUT}`
KER_ALIGNED=$(( KER_SIZE / 16 ))
KER_ALIGNED=$(( KER_ALIGNED + 1 ))
KER_ALIGNED=$(( KER_ALIGNED * 16 ))
FS_SIZE=`stat -c "%s" initramfs.cpio.gz`
FS_ALIGNED=$(( FS_SIZE / 16 ))
FS_ALIGNED=$(( FS_ALIGNED + 1 ))
FS_ALIGNED=$(( FS_ALIGNED * 16 ))
# Padding is done only between kernel and rootfs
KER_ALIGNED=$(( KER_ALIGNED + FS_ALIGNED - FS_SIZE))
TOTAL_SIZE=$(( KER_ALIGNED + FS_SIZE + 16))
echo "FS=$FS_SIZE TOTAL=$TOTAL_SIZE KER_AL=$KER_ALIGNED FS_AL=$FS_ALIGNED"

# VMX header BEGIN
echo -n qbfw > ${OUTPUT}
# Insert total size
byte_swap $(printf "%08x" $TOTAL_SIZE)
echo $OUT | xxd -r -p | dd conv=notrunc oflag=append of=${OUTPUT} >/dev/null 2>&1
# Pad to 256 bytes
dd if=/dev/zero of=${OUTPUT} bs=248 count=1 conv=notrunc oflag=append >/dev/null 2>&1
# Insert debug-mode vmx signature (256 bytes)
#   * Signature magic
echo -en "\x01\x23\x45\x67\x89\xab\xcd\xef" >> ${OUTPUT}
#   * 24 zeroes: mode = 0 (1 byte), verifier (15 bytes), position = 0 (8 bytes)
dd if=/dev/zero of=${OUTPUT} bs=24 count=1 conv=notrunc oflag=append >/dev/null 2>&1
#   * data len
echo `printf "%016x" $TOTAL_SIZE` | xxd -r -p | dd conv=notrunc oflag=append of=${OUTPUT} >/dev/null 2>&1
#   * max data len
echo `printf "%016x" $TOTAL_SIZE` | xxd -r -p | dd conv=notrunc oflag=append of=${OUTPUT} >/dev/null 2>&1
#   * crc32 = 0 (means disabled crc verification)
dd if=/dev/zero of=${OUTPUT} bs=4 count=1 conv=notrunc oflag=append >/dev/null 2>&1
#   * pad to 256 bytes
dd if=/dev/zero of=${OUTPUT} bs=204 count=1 conv=notrunc oflag=append >/dev/null 2>&1
# VMX header END

# Insert kernel
dd if=${INPUT} of=${OUTPUT_STRIP} conv=notrunc oflag=append
# Align kernel to 16 byte boundary (padding for rootfs is also here)
dd if=/dev/zero of=${OUTPUT_STRIP} bs=$((KER_ALIGNED - KER_SIZE)) count=1 conv=notrunc oflag=append
# Insert fs
dd if=initramfs.cpio.gz of=${OUTPUT_STRIP} conv=notrunc oflag=append
# Insert kernel size
byte_swap $(printf "%08x" $KER_ALIGNED)
echo $OUT | xxd -r -p | dd conv=notrunc oflag=append of=${OUTPUT_STRIP}
# Insert fs size
byte_swap $(printf "%08x" $FS_SIZE)
echo $OUT | xxd -r -p | dd conv=notrunc oflag=append of=${OUTPUT_STRIP}
# Pad to 16 bytes
dd if=/dev/zero of=${OUTPUT_STRIP} bs=8 count=1 conv=notrunc oflag=append
# Copy stripped image to header
dd if=${OUTPUT_STRIP} of=${OUTPUT} conv=notrunc oflag=append
# End of signed data

rm -f initramfs.cpio.gz
rm -rf initramfs
