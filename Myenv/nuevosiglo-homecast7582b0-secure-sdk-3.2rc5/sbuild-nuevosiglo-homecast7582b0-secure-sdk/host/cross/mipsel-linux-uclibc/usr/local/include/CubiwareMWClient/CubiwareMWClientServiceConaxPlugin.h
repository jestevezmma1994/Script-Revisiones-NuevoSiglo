/*****************************************************************************
** Cubiware Sp. z o.o. Software License Version 1.0
**
** Copyright (C) 2015 Cubiware Sp. z o.o. All rights reserved.
**
** Any rights which are not expressly granted in this License are entirely and
** exclusively reserved to and by Cubiware Sp. z o.o. You may not rent, lease,
** modify, translate, reverse engineer, decompile, disassemble, or create
** derivative works based on this Software. You may not make access to this
** Software available to others in connection with a service bureau,
** application service provider, or similar business, or make any other use of
** this Software without express written permission from Cubiware Sp. z o.o.
**
** Any User wishing to make use of this Software must contact
** Cubiware Sp. z o.o. to arrange an appropriate license. Use of the Software
** includes, but is not limited to:
** (1) integrating or incorporating all or part of the code into a product for
**     sale or license by, or on behalf of, User to third parties;
** (2) distribution of the binary or source code to third parties for use with
**     a commercial product sold or licensed by, or on behalf of, User.
******************************************************************************/

#ifndef CUBIWARE_MW_CLIENT_SERVICE_CONAX_PLUGIN_H_
#define CUBIWARE_MW_CLIENT_SERVICE_CONAX_PLUGIN_H_

#include <Services/core/QBMiddlewareManager.h>
#include <SvFoundation/SvType.h>
#include <QBAppKit/QBFuture.h>
#include <fibers/c/fibers.h>

/**
 * @file CubiwareMWClientServiceConaxPlugin.h
 * @xmlonly<fullDocumentation>This file requires full documentation</fullDocumentation>
 * @endxmlonly
 * @brief CubiwareMWClientServiceConaxPlugin sends ConaxId to MW.
 *
 * CubiwareMWClientServiceConaxPlugin sends ConaxId to MW immediately after application has started.
 * PlayReady singleton generates ConaxId value and passes it through QBFuture.
 * In case of error while sending ConaxId value, CubiwareMWClientServiceConaxPlugin will
 * retry to send it after some random time. On success, MW sends response with 'ok' status.
 */
typedef struct CubiwareMWClientServiceConaxPlugin_ *CubiwareMWClientServiceConaxPlugin;

/**
 * Conax plugin mode type.
 **/
typedef enum CubiwareMWClientServiceConaxPluginMode_ {
    CubiwareMWClientServiceConaxPluginMode_GenerateID, ///< Conax ID is generated by plugin
    CubiwareMWClientServiceConaxPluginMode_RequestID   ///< Conax ID is requested from MW
} CubiwareMWClientServiceConaxPluginMode;

/**
 * Create instance of CubiwareMWClientServiceConaxPlugin.
 *
 * @param[in] scheduler         Global scheduler for fiber.
 * @param[in] middlewareManager handle to a Middleware Manager instance
 * @param[in] mode              plugin work mode
 * @return                      @a self or @c NULL in case of error
 */
extern CubiwareMWClientServiceConaxPlugin
CubiwareMWClientServiceCreateConaxPlugin(SvScheduler scheduler,
                                         QBMiddlewareManager middlewareManager,
                                         CubiwareMWClientServiceConaxPluginMode mode);

#endif // CUBIWARE_MW_CLIENT_SERVICE_CONAX_PLUGIN_H_
